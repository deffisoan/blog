{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/测试3.png","path":"images/测试3.png","modified":1,"renderable":0},{"_id":"source/images/测试4.png","path":"images/测试4.png","modified":1,"renderable":0},{"_id":"source/images/测试2.png","path":"images/测试2.png","modified":1,"renderable":0},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/default.css","path":"css/default.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/donate/index.html","path":"donate/index.html","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/BTCQR.png","path":"img/BTCQR.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"source/images/测试1.png","path":"images/测试1.png","modified":1,"renderable":0},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/maupassant/.gitignore","hash":"16945417d10c15c950306794dbb0d970b5a199fe","modified":1560858707147},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1560858707147},{"_id":"themes/maupassant/LICENSE","hash":"f0ac2f92770650c9835183f79010c0d307b34acd","modified":1560858707147},{"_id":"themes/maupassant/README.md","hash":"90032cb3a46f741a3d6198de9f83ce384505519e","modified":1560858707148},{"_id":"themes/maupassant/package.json","hash":"076ecc3fe0d33300cc61736b95f610b199dc3c10","modified":1560859343014},{"_id":"themes/maupassant/_config.yml","hash":"9d91588f6e1c7982369b4f2982d52a265619f692","modified":1560859756128},{"_id":"source/_posts/2019-06-24-用Junit对代码进行测试.md","hash":"146fa4b9547c50847cf4a674b406ca072f247fff","modified":1561387814068},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1560858707143},{"_id":"themes/maupassant/.git/config","hash":"037345b11c41abb3dbbbd6e0242ced24979a7097","modified":1560858707144},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1560858692324},{"_id":"themes/maupassant/.git/index","hash":"f9d5e92d382d40cb96af4c741ed062780199a74d","modified":1560858869317},{"_id":"themes/maupassant/.git/packed-refs","hash":"0650516a87bcb11b3dd4edf6bae34f458843447a","modified":1560858707141},{"_id":"themes/maupassant/languages/en.yml","hash":"c3fb5c155560a00889a75882c680afe1197ebf1a","modified":1560858707148},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1560858707148},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1560858707148},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1560858707148},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"710b204e637c18b86ac7c681f7d1cf8dfeddf4bb","modified":1560858707149},{"_id":"themes/maupassant/languages/ru.yml","hash":"2476a631f4d3c668de04af85a6c2c97ba2a57e96","modified":1560858707148},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"bf3ab970f2ab3f29ddeb9f59bf98163be635e284","modified":1560858707149},{"_id":"themes/maupassant/layout/archive.pug","hash":"2fe2cff144c9b7b509b7b6cb1b3acba27aa1d132","modified":1560858707151},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"16c4d1079450f801b5ac079d3cc101856d8f387c","modified":1560858707151},{"_id":"themes/maupassant/layout/base.pug","hash":"a4e32bcb580b76af9ad0582d9d3f0107e34509ed","modified":1560858707151},{"_id":"themes/maupassant/layout/index.pug","hash":"0435a4e5f5c6976e05b3079d335453c246f5ba6e","modified":1560858707151},{"_id":"themes/maupassant/layout/page.pug","hash":"8cfd307b13cad8be34a1e75c4566f96c1722e08e","modified":1560858707151},{"_id":"themes/maupassant/layout/single-column.pug","hash":"0593f261dc208bb0b5c4232eb41eff597a291bd9","modified":1560858707151},{"_id":"themes/maupassant/layout/timeline.pug","hash":"84fbfc92ccdf291b491140d89557553141a5d3f9","modified":1560858707152},{"_id":"themes/maupassant/layout/post.pug","hash":"f4d17b1b2a590cc076e80d912591648f9e99aeaf","modified":1560858707151},{"_id":"source/images/测试3.png","hash":"651384136e7ce081f714e2059d07f5ce8e0d96cb","modified":1561386189571},{"_id":"source/images/测试4.png","hash":"abc90baf82928f2e9fc4d6986a237bfd1b9c55fb","modified":1561386196698},{"_id":"source/images/测试2.png","hash":"59c68318e991aa0879b8babea896bb0ca361462e","modified":1561385346872},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1560858692325},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1560858692325},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1560858692326},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1560858692326},{"_id":"themes/maupassant/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1560858692325},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1560858692326},{"_id":"themes/maupassant/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1560858692326},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1560858692326},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1560858692325},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1560858692325},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1560858692326},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"973c0328690a31526296dd3ee91cf12a1b26b3ed","modified":1560858707144},{"_id":"themes/maupassant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1560858692324},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"31bf35a57634ff8a796c71dd5246eba3a3db10ee","modified":1560858707149},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"507fd8d2fde98df6216ed7c8f60ebea7cf77bfb2","modified":1560858707149},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"650781b5bc8c632658ad6880ba663b1e3bfb5798","modified":1560858707149},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1560858707149},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"8af6e452ea2a56b110b5079f79bf743b643f7d6c","modified":1560858707149},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1560858707149},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1560858707149},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1560858707150},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1560858707150},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"004c8a3edc19d428179b83a0f97eae3c1a6d3cfa","modified":1560858707150},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1560858707150},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1560858707150},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1560858707150},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"c45aa7ec00158579e58f1f8dfd890447bb5e5e54","modified":1560858707150},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"4102d446f13b02ff617f055c2a8f726bca12744a","modified":1560858707150},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"19431336d724d2118e46da43683bce9063176541","modified":1560858707150},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6e8e4123cca38840c4607c1a056205972b82bb7b","modified":1560858707150},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1560858707151},{"_id":"themes/maupassant/source/css/donate.css","hash":"f019876946aeb80e567ece250d54c1327c794583","modified":1560858707152},{"_id":"themes/maupassant/source/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1560858707152},{"_id":"themes/maupassant/source/donate/index.html","hash":"c42428765d48c8674ce28100ad95fdf4c7806a85","modified":1560858707153},{"_id":"themes/maupassant/source/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1560858707154},{"_id":"themes/maupassant/source/css/style.scss","hash":"fa5dfd0867f95fe1708e6fda90e41db6364c01d9","modified":1560858707153},{"_id":"themes/maupassant/source/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1560858707153},{"_id":"themes/maupassant/source/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1560858707154},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1560858707154},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1560858707154},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1560858707155},{"_id":"themes/maupassant/source/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1560858707155},{"_id":"themes/maupassant/source/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1560858707154},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1560858707155},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1560858707155},{"_id":"themes/maupassant/source/js/donate.js","hash":"780beaaf44b1e6c057752bdbc085b1048937e5e7","modified":1560858707155},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1560858707156},{"_id":"themes/maupassant/source/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1560858707158},{"_id":"source/images/测试1.png","hash":"6e99e189706de32b9790041f1f2cd3f3fa294f53","modified":1561385341344},{"_id":"themes/maupassant/source/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1560858707159},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1560858707160},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1560858707160},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"4038440af2ee0106fac646477c3d97866ea52a2f","modified":1560858707143},{"_id":"themes/maupassant/.git/objects/pack/pack-090d17b3c27313b82be6cf9c11585a1a86acb72f.idx","hash":"defa039e308bf62627d30a1ebe9ce22513846247","modified":1560858707135},{"_id":"themes/maupassant/source/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1560858707157},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"973c0328690a31526296dd3ee91cf12a1b26b3ed","modified":1560858707144},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1560858707143},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"973c0328690a31526296dd3ee91cf12a1b26b3ed","modified":1560858707143},{"_id":"themes/maupassant/db.json","hash":"0958ff9709c9b9d7621b61ab4d1a3547b1649287","modified":1560859350618},{"_id":"themes/maupassant/.git/objects/pack/pack-090d17b3c27313b82be6cf9c11585a1a86acb72f.pack","hash":"33d4b455f69b5fa43067b25557c1ee0dfbe843cf","modified":1560858707134}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"用Junit对代码进行测试","date":"2019-06-24T14:29:54.000Z","_content":"\n通常Coding入门时存在的一个误区就是，编码过程会占用绝大多数时间。事实上编码只占到了很小一部分(30%左右)，其余时间都是在设计构思，和测试维护当中，尤其是维护占据了一个项目生命周期的绝大多数时间。\n因此测试其实是一个承接项，保证了之前编码内容的正确性，同时也避免了维护过程当中出现大量错误，看似编写测试用例麻烦耽误时间，其实益处无穷。关于测试，除了常见的[白盒测试](https://zh.wikipedia.org/wiki/%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95)，[黑盒测试](https://zh.wikipedia.org/wiki/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95)，还要谈到代码覆盖率的概念。\n### 代码覆盖率\n[代码覆盖率](https://en.wikipedia.org/wiki/Code_coverage)是软件测试中的一种度量，描述程序中源代码被测试的比例和程度，所得比例称为代码覆盖率。其实就是指明测试代码执行了原代码中哪一部分内容，例如:\n```JAVA\nvoid Foo(int a, int b) {\n    if (a > b) {\n        a = 2;\n    } else {\n        a = 1;\n    }\n}\n```\n很明显，当a=4, b=2时，执行测试代码会运行判断的前半部分，而后面的代码语句块a=1则未被覆盖。\n#### 100%的覆盖率=Bug Free？\n在一些关键安全代码上通常可能要求我们将代码覆盖率达到100%，那么完全覆盖的代码就表示不存在问题了么？从定义上很明显的可以看出，只要我们的测试代码执行过程使用了原代码的全部函数和语句，判断等，就可以称之为全覆盖。但是输入是一个特例呢？\n\n我们可以编写一个普通的计算器代码:\n```JAVA\npublic class Calculator {\n    // ....\n    int add(int a, int b) {\n        return a + b;\n    }\n}\n```\n然后为其写一个简单的测试用例\n```JAVA\npublic class CalculatorTest {\n    private final Calculator calculator = new Calculator();\n\n    @Test\n    void add() {\n        assertEqual(calculator.add(1, 2), 3);\n    }\n}\n```\n对于原代码，这段测试用例是100%覆盖的。但这个代码很明显存在一个溢出的问题，当执行以下测试用例，结果也是显而易见的错误。   \n```JAVA\nassertEqual(Integer.MAX_VALUE + 1, 2147483648);\n```\n因此不要盲目追求100%覆盖，思路清晰，考虑全面才是coding的基本功。\n\n### 使用JUnit\n有了以上的前提，可以谈一下使用JUnit，Junit是用来提供给用户侧进行多种测试使用的工具，截止到2019年目前最新的版本为[JUnit5](https://junit.org/junit5/)，支持JDK8以上。\n\n使用的例子为利用JAVA进行姓名对象比较，需要重写hashCode和equals方法才可以使两个自定义对象进行比较。\n```JAVA\npackage org.demo.name;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport java.util.Objects;\n\npublic class Name {\n    @Getter @Setter private String firstName;\n\n    @Getter @Setter private String lastName;\n\n    public Name(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj instanceof Name) {\n            Name name = (Name) obj;\n            return name.getFirstName().equals(this.firstName) && name.getLastName().equals(this.lastName);\n        }\n        return false;\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(firstName, lastName);\n    }\n\n    @Override\n    public String toString() {\n        return \"Name{\" +\n                \"firstName='\" + firstName + '\\'' +\n                \", lastName='\" + lastName + '\\'' +\n                '}';\n    }\n}\n```\n\n我选择了使用IntelliJ IDEA + Junit4来进行实验，生成测试代码可按下`option`+`Enter`键，如图。\n![生成测试代码](/images/测试1.png)\n选择Create Test，之后根据实际情况选择对应的测试库和待测试函数\n\n![](/images/测试2.png)\n生成后便可以改写我们自己需要用到的测试用例，以下为一个简单的示范:\n```JAVA\nimport org.demo.name.Name;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotEquals;\n\n/**\n * @date 2019/6/23\n * @since 1.0\n */\npublic class NameTest {\n    @Test\n    public void testEqual() {\n        Name name1 = new Name(\"Wang\", \"Qiang\");\n        Name name2 = new Name(\"Wang\", \"Qiang\");\n        assertEquals(name1, name2);\n    }\n\n    @Test\n    public void testHash() {\n        Name name1 = new Name(\"Wang\", \"Qiang\");\n        Name name2 = new Name(\"Wang\", \"Qiang\");\n        Name name3 = new Name(\"Wang\", \"ErGou\");\n        assertEquals(name1.hashCode(), name2.hashCode());\n        assertNotEquals(name1.hashCode(), name3.hashCode());\n    }\n}\n\n```\n除了单独运行上述代码，还可以执行全部测试，在文件夹内有件选择选择`RUN ALL Tests`，如图\n![](/images/测试3.png)\n运行完即可获取测试结果以及各段代码的覆盖率。\n![](/images/测试4.png)\n\n\n","source":"_posts/2019-06-24-用Junit对代码进行测试.md","raw":"---\ntitle: 用Junit对代码进行测试\ntags:\n  - Junit\ndate: 2019-06-24 22:29:54\n---\n\n通常Coding入门时存在的一个误区就是，编码过程会占用绝大多数时间。事实上编码只占到了很小一部分(30%左右)，其余时间都是在设计构思，和测试维护当中，尤其是维护占据了一个项目生命周期的绝大多数时间。\n因此测试其实是一个承接项，保证了之前编码内容的正确性，同时也避免了维护过程当中出现大量错误，看似编写测试用例麻烦耽误时间，其实益处无穷。关于测试，除了常见的[白盒测试](https://zh.wikipedia.org/wiki/%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95)，[黑盒测试](https://zh.wikipedia.org/wiki/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95)，还要谈到代码覆盖率的概念。\n### 代码覆盖率\n[代码覆盖率](https://en.wikipedia.org/wiki/Code_coverage)是软件测试中的一种度量，描述程序中源代码被测试的比例和程度，所得比例称为代码覆盖率。其实就是指明测试代码执行了原代码中哪一部分内容，例如:\n```JAVA\nvoid Foo(int a, int b) {\n    if (a > b) {\n        a = 2;\n    } else {\n        a = 1;\n    }\n}\n```\n很明显，当a=4, b=2时，执行测试代码会运行判断的前半部分，而后面的代码语句块a=1则未被覆盖。\n#### 100%的覆盖率=Bug Free？\n在一些关键安全代码上通常可能要求我们将代码覆盖率达到100%，那么完全覆盖的代码就表示不存在问题了么？从定义上很明显的可以看出，只要我们的测试代码执行过程使用了原代码的全部函数和语句，判断等，就可以称之为全覆盖。但是输入是一个特例呢？\n\n我们可以编写一个普通的计算器代码:\n```JAVA\npublic class Calculator {\n    // ....\n    int add(int a, int b) {\n        return a + b;\n    }\n}\n```\n然后为其写一个简单的测试用例\n```JAVA\npublic class CalculatorTest {\n    private final Calculator calculator = new Calculator();\n\n    @Test\n    void add() {\n        assertEqual(calculator.add(1, 2), 3);\n    }\n}\n```\n对于原代码，这段测试用例是100%覆盖的。但这个代码很明显存在一个溢出的问题，当执行以下测试用例，结果也是显而易见的错误。   \n```JAVA\nassertEqual(Integer.MAX_VALUE + 1, 2147483648);\n```\n因此不要盲目追求100%覆盖，思路清晰，考虑全面才是coding的基本功。\n\n### 使用JUnit\n有了以上的前提，可以谈一下使用JUnit，Junit是用来提供给用户侧进行多种测试使用的工具，截止到2019年目前最新的版本为[JUnit5](https://junit.org/junit5/)，支持JDK8以上。\n\n使用的例子为利用JAVA进行姓名对象比较，需要重写hashCode和equals方法才可以使两个自定义对象进行比较。\n```JAVA\npackage org.demo.name;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport java.util.Objects;\n\npublic class Name {\n    @Getter @Setter private String firstName;\n\n    @Getter @Setter private String lastName;\n\n    public Name(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj instanceof Name) {\n            Name name = (Name) obj;\n            return name.getFirstName().equals(this.firstName) && name.getLastName().equals(this.lastName);\n        }\n        return false;\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(firstName, lastName);\n    }\n\n    @Override\n    public String toString() {\n        return \"Name{\" +\n                \"firstName='\" + firstName + '\\'' +\n                \", lastName='\" + lastName + '\\'' +\n                '}';\n    }\n}\n```\n\n我选择了使用IntelliJ IDEA + Junit4来进行实验，生成测试代码可按下`option`+`Enter`键，如图。\n![生成测试代码](/images/测试1.png)\n选择Create Test，之后根据实际情况选择对应的测试库和待测试函数\n\n![](/images/测试2.png)\n生成后便可以改写我们自己需要用到的测试用例，以下为一个简单的示范:\n```JAVA\nimport org.demo.name.Name;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotEquals;\n\n/**\n * @date 2019/6/23\n * @since 1.0\n */\npublic class NameTest {\n    @Test\n    public void testEqual() {\n        Name name1 = new Name(\"Wang\", \"Qiang\");\n        Name name2 = new Name(\"Wang\", \"Qiang\");\n        assertEquals(name1, name2);\n    }\n\n    @Test\n    public void testHash() {\n        Name name1 = new Name(\"Wang\", \"Qiang\");\n        Name name2 = new Name(\"Wang\", \"Qiang\");\n        Name name3 = new Name(\"Wang\", \"ErGou\");\n        assertEquals(name1.hashCode(), name2.hashCode());\n        assertNotEquals(name1.hashCode(), name3.hashCode());\n    }\n}\n\n```\n除了单独运行上述代码，还可以执行全部测试，在文件夹内有件选择选择`RUN ALL Tests`，如图\n![](/images/测试3.png)\n运行完即可获取测试结果以及各段代码的覆盖率。\n![](/images/测试4.png)\n\n\n","slug":"用Junit对代码进行测试","published":1,"updated":"2019-06-24T14:50:14.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxaj502600001b5n8rzsbi45","content":"<p>通常Coding入门时存在的一个误区就是，编码过程会占用绝大多数时间。事实上编码只占到了很小一部分(30%左右)，其余时间都是在设计构思，和测试维护当中，尤其是维护占据了一个项目生命周期的绝大多数时间。<br>因此测试其实是一个承接项，保证了之前编码内容的正确性，同时也避免了维护过程当中出现大量错误，看似编写测试用例麻烦耽误时间，其实益处无穷。关于测试，除了常见的<a href=\"https://zh.wikipedia.org/wiki/%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95\" target=\"_blank\" rel=\"noopener\">白盒测试</a>，<a href=\"https://zh.wikipedia.org/wiki/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95\" target=\"_blank\" rel=\"noopener\">黑盒测试</a>，还要谈到代码覆盖率的概念。</p>\n<h3 id=\"代码覆盖率\"><a href=\"#代码覆盖率\" class=\"headerlink\" title=\"代码覆盖率\"></a>代码覆盖率</h3><p><a href=\"https://en.wikipedia.org/wiki/Code_coverage\" target=\"_blank\" rel=\"noopener\">代码覆盖率</a>是软件测试中的一种度量，描述程序中源代码被测试的比例和程度，所得比例称为代码覆盖率。其实就是指明测试代码执行了原代码中哪一部分内容，例如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &gt; b) &#123;</span><br><span class=\"line\">        a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>很明显，当a=4, b=2时，执行测试代码会运行判断的前半部分，而后面的代码语句块a=1则未被覆盖。</p>\n<h4 id=\"100-的覆盖率-Bug-Free？\"><a href=\"#100-的覆盖率-Bug-Free？\" class=\"headerlink\" title=\"100%的覆盖率=Bug Free？\"></a>100%的覆盖率=Bug Free？</h4><p>在一些关键安全代码上通常可能要求我们将代码覆盖率达到100%，那么完全覆盖的代码就表示不存在问题了么？从定义上很明显的可以看出，只要我们的测试代码执行过程使用了原代码的全部函数和语句，判断等，就可以称之为全覆盖。但是输入是一个特例呢？</p>\n<p>我们可以编写一个普通的计算器代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ....</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后为其写一个简单的测试用例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalculatorTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Calculator calculator = <span class=\"keyword\">new</span> Calculator();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        assertEqual(calculator.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>), <span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于原代码，这段测试用例是100%覆盖的。但这个代码很明显存在一个溢出的问题，当执行以下测试用例，结果也是显而易见的错误。   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEqual(Integer.MAX_VALUE + <span class=\"number\">1</span>, <span class=\"number\">2147483648</span>);</span><br></pre></td></tr></table></figure>\n\n<p>因此不要盲目追求100%覆盖，思路清晰，考虑全面才是coding的基本功。</p>\n<h3 id=\"使用JUnit\"><a href=\"#使用JUnit\" class=\"headerlink\" title=\"使用JUnit\"></a>使用JUnit</h3><p>有了以上的前提，可以谈一下使用JUnit，Junit是用来提供给用户侧进行多种测试使用的工具，截止到2019年目前最新的版本为<a href=\"https://junit.org/junit5/\" target=\"_blank\" rel=\"noopener\">JUnit5</a>，支持JDK8以上。</p>\n<p>使用的例子为利用JAVA进行姓名对象比较，需要重写hashCode和equals方法才可以使两个自定义对象进行比较。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.demo.name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Getter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Setter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Getter</span> <span class=\"meta\">@Setter</span> <span class=\"keyword\">private</span> String firstName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Getter</span> <span class=\"meta\">@Setter</span> <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Name</span><span class=\"params\">(String firstName, String lastName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.firstName = firstName;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lastName = lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> Name) &#123;</span><br><span class=\"line\">            Name name = (Name) obj;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name.getFirstName().equals(<span class=\"keyword\">this</span>.firstName) &amp;&amp; name.getLastName().equals(<span class=\"keyword\">this</span>.lastName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Objects.hash(firstName, lastName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Name&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"firstName='\"</span> + firstName + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", lastName='\"</span> + lastName + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我选择了使用IntelliJ IDEA + Junit4来进行实验，生成测试代码可按下<code>option</code>+<code>Enter</code>键，如图。<br><img src=\"/images/%E6%B5%8B%E8%AF%951.png\" alt=\"生成测试代码\"><br>选择Create Test，之后根据实际情况选择对应的测试库和待测试函数</p>\n<p><img src=\"/images/%E6%B5%8B%E8%AF%952.png\" alt><br>生成后便可以改写我们自己需要用到的测试用例，以下为一个简单的示范:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.demo.name.Name;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertEquals;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertNotEquals;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2019/6/23</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testEqual</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Name name1 = <span class=\"keyword\">new</span> Name(<span class=\"string\">\"Wang\"</span>, <span class=\"string\">\"Qiang\"</span>);</span><br><span class=\"line\">        Name name2 = <span class=\"keyword\">new</span> Name(<span class=\"string\">\"Wang\"</span>, <span class=\"string\">\"Qiang\"</span>);</span><br><span class=\"line\">        assertEquals(name1, name2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testHash</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Name name1 = <span class=\"keyword\">new</span> Name(<span class=\"string\">\"Wang\"</span>, <span class=\"string\">\"Qiang\"</span>);</span><br><span class=\"line\">        Name name2 = <span class=\"keyword\">new</span> Name(<span class=\"string\">\"Wang\"</span>, <span class=\"string\">\"Qiang\"</span>);</span><br><span class=\"line\">        Name name3 = <span class=\"keyword\">new</span> Name(<span class=\"string\">\"Wang\"</span>, <span class=\"string\">\"ErGou\"</span>);</span><br><span class=\"line\">        assertEquals(name1.hashCode(), name2.hashCode());</span><br><span class=\"line\">        assertNotEquals(name1.hashCode(), name3.hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了单独运行上述代码，还可以执行全部测试，在文件夹内有件选择选择<code>RUN ALL Tests</code>，如图<br><img src=\"/images/%E6%B5%8B%E8%AF%953.png\" alt><br>运行完即可获取测试结果以及各段代码的覆盖率。<br><img src=\"/images/%E6%B5%8B%E8%AF%954.png\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p>通常Coding入门时存在的一个误区就是，编码过程会占用绝大多数时间。事实上编码只占到了很小一部分(30%左右)，其余时间都是在设计构思，和测试维护当中，尤其是维护占据了一个项目生命周期的绝大多数时间。<br>因此测试其实是一个承接项，保证了之前编码内容的正确性，同时也避免了维护过程当中出现大量错误，看似编写测试用例麻烦耽误时间，其实益处无穷。关于测试，除了常见的<a href=\"https://zh.wikipedia.org/wiki/%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95\" target=\"_blank\" rel=\"noopener\">白盒测试</a>，<a href=\"https://zh.wikipedia.org/wiki/%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95\" target=\"_blank\" rel=\"noopener\">黑盒测试</a>，还要谈到代码覆盖率的概念。</p>\n<h3 id=\"代码覆盖率\"><a href=\"#代码覆盖率\" class=\"headerlink\" title=\"代码覆盖率\"></a>代码覆盖率</h3><p><a href=\"https://en.wikipedia.org/wiki/Code_coverage\" target=\"_blank\" rel=\"noopener\">代码覆盖率</a>是软件测试中的一种度量，描述程序中源代码被测试的比例和程度，所得比例称为代码覆盖率。其实就是指明测试代码执行了原代码中哪一部分内容，例如:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Foo</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &gt; b) &#123;</span><br><span class=\"line\">        a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>很明显，当a=4, b=2时，执行测试代码会运行判断的前半部分，而后面的代码语句块a=1则未被覆盖。</p>\n<h4 id=\"100-的覆盖率-Bug-Free？\"><a href=\"#100-的覆盖率-Bug-Free？\" class=\"headerlink\" title=\"100%的覆盖率=Bug Free？\"></a>100%的覆盖率=Bug Free？</h4><p>在一些关键安全代码上通常可能要求我们将代码覆盖率达到100%，那么完全覆盖的代码就表示不存在问题了么？从定义上很明显的可以看出，只要我们的测试代码执行过程使用了原代码的全部函数和语句，判断等，就可以称之为全覆盖。但是输入是一个特例呢？</p>\n<p>我们可以编写一个普通的计算器代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ....</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后为其写一个简单的测试用例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalculatorTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Calculator calculator = <span class=\"keyword\">new</span> Calculator();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        assertEqual(calculator.add(<span class=\"number\">1</span>, <span class=\"number\">2</span>), <span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于原代码，这段测试用例是100%覆盖的。但这个代码很明显存在一个溢出的问题，当执行以下测试用例，结果也是显而易见的错误。   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assertEqual(Integer.MAX_VALUE + <span class=\"number\">1</span>, <span class=\"number\">2147483648</span>);</span><br></pre></td></tr></table></figure>\n\n<p>因此不要盲目追求100%覆盖，思路清晰，考虑全面才是coding的基本功。</p>\n<h3 id=\"使用JUnit\"><a href=\"#使用JUnit\" class=\"headerlink\" title=\"使用JUnit\"></a>使用JUnit</h3><p>有了以上的前提，可以谈一下使用JUnit，Junit是用来提供给用户侧进行多种测试使用的工具，截止到2019年目前最新的版本为<a href=\"https://junit.org/junit5/\" target=\"_blank\" rel=\"noopener\">JUnit5</a>，支持JDK8以上。</p>\n<p>使用的例子为利用JAVA进行姓名对象比较，需要重写hashCode和equals方法才可以使两个自定义对象进行比较。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.demo.name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Getter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Setter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Objects;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Name</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Getter</span> <span class=\"meta\">@Setter</span> <span class=\"keyword\">private</span> String firstName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Getter</span> <span class=\"meta\">@Setter</span> <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Name</span><span class=\"params\">(String firstName, String lastName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.firstName = firstName;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lastName = lastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object obj)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> Name) &#123;</span><br><span class=\"line\">            Name name = (Name) obj;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name.getFirstName().equals(<span class=\"keyword\">this</span>.firstName) &amp;&amp; name.getLastName().equals(<span class=\"keyword\">this</span>.lastName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Objects.hash(firstName, lastName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Name&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"firstName='\"</span> + firstName + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", lastName='\"</span> + lastName + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我选择了使用IntelliJ IDEA + Junit4来进行实验，生成测试代码可按下<code>option</code>+<code>Enter</code>键，如图。<br><img src=\"/images/%E6%B5%8B%E8%AF%951.png\" alt=\"生成测试代码\"><br>选择Create Test，之后根据实际情况选择对应的测试库和待测试函数</p>\n<p><img src=\"/images/%E6%B5%8B%E8%AF%952.png\" alt><br>生成后便可以改写我们自己需要用到的测试用例，以下为一个简单的示范:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.demo.name.Name;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertEquals;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> org.junit.Assert.assertNotEquals;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2019/6/23</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testEqual</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Name name1 = <span class=\"keyword\">new</span> Name(<span class=\"string\">\"Wang\"</span>, <span class=\"string\">\"Qiang\"</span>);</span><br><span class=\"line\">        Name name2 = <span class=\"keyword\">new</span> Name(<span class=\"string\">\"Wang\"</span>, <span class=\"string\">\"Qiang\"</span>);</span><br><span class=\"line\">        assertEquals(name1, name2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testHash</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Name name1 = <span class=\"keyword\">new</span> Name(<span class=\"string\">\"Wang\"</span>, <span class=\"string\">\"Qiang\"</span>);</span><br><span class=\"line\">        Name name2 = <span class=\"keyword\">new</span> Name(<span class=\"string\">\"Wang\"</span>, <span class=\"string\">\"Qiang\"</span>);</span><br><span class=\"line\">        Name name3 = <span class=\"keyword\">new</span> Name(<span class=\"string\">\"Wang\"</span>, <span class=\"string\">\"ErGou\"</span>);</span><br><span class=\"line\">        assertEquals(name1.hashCode(), name2.hashCode());</span><br><span class=\"line\">        assertNotEquals(name1.hashCode(), name3.hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了单独运行上述代码，还可以执行全部测试，在文件夹内有件选择选择<code>RUN ALL Tests</code>，如图<br><img src=\"/images/%E6%B5%8B%E8%AF%953.png\" alt><br>运行完即可获取测试结果以及各段代码的覆盖率。<br><img src=\"/images/%E6%B5%8B%E8%AF%954.png\" alt></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjxaj502600001b5n8rzsbi45","tag_id":"cjxaj502b00011b5n096wdlot","_id":"cjxaj502c00021b5nvdevxeo0"}],"Tag":[{"name":"Junit","_id":"cjxaj502b00011b5n096wdlot"}]}}